"******************************************
" unite
"******************************************
"let g:unite_enable_start_insert=1
"let g:unite_source_history_yank_enable =1
"nmap <Space> [unite]
"nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer file_mru<CR>
"nnoremap <silent> [unite]d :<C-u>Unite<Space>directory_mru<CR>
"nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
"nnoremap <silent> [unite]r :<C-u>Unite<Space>register<CR>
"nnoremap <silent> [unite]t :<C-u>Unite<Space>tab<CR>
"nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
"nnoremap <silent> [unite]o :<C-u>Unite<Space>outline<CR>
"nnoremap <silent> [unite]<CR> :<C-u>Unite<Space>file_rec:!<CR>
"autocmd FileType unite call s:unite_my_settings()
"function! s:unite_my_settings()"{{{
"	nmap <buffer> <ESC> <Plug>(unite_exit)
"endfunction"}}}
"
"******************************************
" quickrun
"******************************************
"au FileType qf nnoremap <silent><buffer>q :quit<CR>
"nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
let g:quickrun_config = {}
"******************************************
" gitgutter
"******************************************
"let g:gitgutter_sign_added = '+'
"let g:gitgutter_sign_modified = '->'
"let g:gitgutter_sign_removed = 'x'
"
"******************************************
" lightline
"******************************************

let g:lightline = {
			\ 'colorscheme': 'powerline',
			\ 'mode_map': {'c': 'NORMAL'},
			\ 'active': {
			\   'left': [
			\	[ 'mode', 'paste' ],
			\	[ 'fugitive', 'gitgutter', 'filename']
			\	],
			\   'right': [
			\	['lineinfo', 'syntastic'],
			\	['percent'],
			\	['fileformat','fileencoding','filetype'],
			\	]
			\ },
			\ 'component_function': {
			\   'modified': 'MyModified',
			\   'readonly': 'MyReadonly',
			\   'fugitive': 'MyFugitive',
			\   'filename': 'MyFilename',
			\   'fileformat': 'MyFileformat',
			\   'filetype': 'MyFiletype',
			\   'fileencoding': 'MyFileencoding',
			\   'mode': 'MyMode',
			\   'syntastic': 'SyntasticStatuslineFlag',
			\   'gitgutter': 'MyGitGutter',
			\ },
			\ }

function! MyModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
				\  &ft == 'unite' ? unite#get_status_string() :
				\  &ft == 'vimshell' ? vimshell#get_status_string() :
				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
				\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
	try
		if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
			return fugitive#head()
		endif
	catch
	endtry
	return ''
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
	if ! exists('*GitGutterGetHunkSummary')
				\ || ! get(g:, 'gitgutter_enabled', 0)
				\ || winwidth('.') <= 90
		return ''
	endif
	let symbols = [
				\ g:gitgutter_sign_added . ' ',
				\ g:gitgutter_sign_modified . ' ',
				\ g:gitgutter_sign_removed . ' '
				\ ]
	let hunks = GitGutterGetHunkSummary()
	let ret = []
	for i in [0, 1, 2]
		if hunks[i] > 0
			call add(ret, symbols[i] . hunks[i])
		endif
	endfor
	return join(ret, ' ')
endfunction
""******************************************
"" vim-indent-guides
""******************************************
"let g:indent_guides_auto_colors = 0
"
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=gray20 ctermbg=4
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=gray40 ctermbg=3
""autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=DarkSlateBlue ctermbg=4
""autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=seashell ctermbg=3
"let g:indent_guides_enable_on_vim_startup=1
"let g:indent_guides_guide_size=1
""*********************************************
""Seiya (clear background)
""*********************************************
""if !has('gui_running')
""    augroup seiya
""        autocmd!
""        autocmd VimEnter,ColorScheme * highlight Normal ctermbg=none
""        autocmd VimEnter,ColorScheme * highlight LineNr ctermbg=none
""        autocmd VimEnter,ColorScheme * highlight SignColumn ctermbg=none
""        autocmd VimEnter,ColorScheme * highlight VertSplit ctermbg=none
""        autocmd VimEnter,ColorScheme * highlight NonText ctermbg=none
""    augroup END
""endif
""*********************************************
""vim-clang
""  - vim-gnome
""  - clang-format-3.x
""  - clang-3.x
""*********************************************
"" disable auto completion for vim-clanG
"let g:clang_auto = 0
"let g:clang_complete_auto = 0 
"let g:clang_auto_select = 0
"let g:clang_use_library = 1
"
"" default 'longest' can not work with neocomplete
"let g:clang_c_completeopt   = 'menuone'
"let g:clang_cpp_completeopt = 'menuone'
"
"if executable('clang-3.6')
"	let g:clang_exec = 'clang-3.6'
"elseif executable('clang-3.5')
"	let g:clang_exec = 'clang-3.5'
"elseif executable('clang-3.4')
"	let g:clang_exec = 'clang-3.4'
"else
"	let g:clang_exec = 'clang'
"endif
"
"if executable('clang-format-3.6')
"	let g:clang_format_exec = 'clang-format-3.6'
"elseif executable('clang-format-3.5')
"	let g:clang_format_exec ='clang-format-3.5'
"elseif executable('clang-format-3.4')
"	let g:clang_format_exec ='clang-format-3.4'
"else
"	let g:clang_exec ='clang-format'
"endif
"
"let g:clang_c_options ='-std=c11'
"let g:clang_cpp_options ='-std=c++11 -stdlib=libc++'
"set tag=tags
"nnoremap <F3> :<C-u>tab stj <C-R>=expand('<cword>')<CR><CR>
"
""*********************************************
""neocomplete
""*********************************************
""Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
"let g:neocomplete#enable_at_startup = 1
""" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use smartcase.
"let g:neocomplete#enable_smart_case = 1
"" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"
"" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
"			\ 'default' : '',
"			\ 'vimshell' : $HOME.'/.vimshell_hist',
"			\ 'scheme' : $HOME.'/.gosh_completions'
"			\ }
"
"" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
"	let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
"" Plugin key-mappings.
"inoremap <expr><C-g> neocomplete#undo_completion()
"inoremap <expr><C-l> neocomplete#complete_common_string()
"
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
""inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
""function! s:my_cr_function()
""	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
""	" For no inserting <CR> key.
""	"return pumvisible() ? "\<C-y>" : "\<CR>"
""endfunction
"" <TAB>: completion.
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <silent> <expr> <Tab> pumvisible() ? "\<C-x>\<C-o>\<C-p>" : "\<Tab>"
"" Close popup by <Space>.
""inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
"" AutoComplPop like behavior.
""let g:neocomplete#enable_auto_select = 1
"
"" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplete#enable_auto_select = 1
""let g:neocomplete#disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"
"" Enable omni completion.
"" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
"	let g:neocomplete#sources#omni#input_patterns = {}
"endif
"let g:clang_diagsopt = ''
"setlocal omnifunc=
""let g:neocomplete#sources#omni#input_patterns.php = '[^.\t]->\h\w*\|\h\w*::'
""let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
""let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
"" For perlomni.vim setting.
"" https://github.com/c9s/perlomni.vim
